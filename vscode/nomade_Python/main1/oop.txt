oop(Object Oriented Programming) 객체 지향 프로그래밍이란?

1.정의
객체 지향 프로그래밍(oop) 은
컴퓨터 프로그램을 객체(Object) 들의 집합으로 보고,
이 객체들이 상호작용하면서 동작하는 방식으로 코드를 구성하는
프로그래밍 패러다임(방법론)임

2.사용이유(oop 의 장점)
- 직관적임
- 데이터와 기능을 하나의 단위(객체)로 묶음
- 코드 재사용성 향상 -> 클래스(class) 와 상속(inheritance) 덕분
- 유지보수와 확장에 유리 -> 기능 추가/변경이 쉬움
- 대규모 프로젝트나 협업에 강함 -> 기업들이 선호

3. OOP는 어디에 쓰일까?
oop는 파이썬만의 기능이 아님 다음과 같은 당양한 언어들이 oop 지원
- 파이썬
- 자바
- c++ / c#
- 자바스크립트 / 타입스크립트
- Dart
- Swift, Kotlin 등

4. 절차 지향과의 차이점
_____________________________________________________
| 구분 | 절차 지향 (Procedure) | 객체 지향 (OOP)    |
|------|-----------------------|------------------- |
| 중심 | 함수와 명령어 중심    | 객체 중심          |
| 구성 | 순차적 흐름           | 객체 간 상호작용   |
| 예시 | C언어, 초기 파이썬    | Java, Python 등    |
-----------------------------------------------------

5. 객체(Object) 란?
- 속성(데이터) + 행동(함수)을 모두 가지는 독립된 단위
_________________________________________________________________
| 개념                | 설명                                    |
| -----------------   | ----------------------                  |
| **클래스(Class)**   | 객체를 만들기 위한 설계도               |
| **객체(Object)**    | 클래스를 바탕으로 만든 실체 (인스턴스)  |
| **속성(Attribute)** | 객체의 상태(정보) = 변수                |
| **행동(Method)**    | 객체의 기능(행동) = 함수                |
-----------------------------------------------------------------

OOP의 4대 특성
1. 추상화 (Abstraction)  
필요한 것만 보여주고, 복잡한 내부는 숨김
- 사용자는 복잡한 내부 구조 몰라도 사용만 하면됨
- 자동차 운전할 때 엔진 구조 몰라도 핸들/가속 페달만 조작하면되듯이

2. 캡슐화 (Encapsulation)
데이터와 기능을 하나로 묶고, 외부에서 직접 접근하지 못하게 보호함
- 중요한 정보나 함수는 숨기고(private), 필요한것만 public
- 보안성좋아지고 실수 방지

3. 상속 (inheritance)
부모 클래스의 속성과 기능을 자식 클래스가 물려받는것
- 코드 재사용성 높음
- 자식클래스는 부모 기능 + 자기 것도 추가가능

4. 다형성 (Polymorphism)
같은 이름의 함수가 상황에 따라 다르게 동작하는것
- speak() 라는 함수가 객체 종류마다 다르게 발을을

정리
_____________________________________________________________________
| 특성       | 의미                  | 핵심 포인트                   |
| -------    | ------------          | ------------------- ----------|
| **추상화** | 복잡한 내부 감춤      | 필요한 기능만 공개            |
| **캡슐화** | 데이터 보호           |외부접근 차단, 메서드 통해 조작|
| **상속**   | 부모 기능 물려받음    | 코드 재사용성                 |
| **다형성** | 같은 함수 다르게 동작 | 유연한 구조                   |
----------------------------------------------------------------------